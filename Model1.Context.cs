//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibrarySystemFrontend
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LibrarySystemEntities : DbContext
    {
        public LibrarySystemEntities()
            : base("name=LibrarySystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Authors> Authors { get; set; }
        public virtual DbSet<BookCopies> BookCopies { get; set; }
        public virtual DbSet<Books> Books { get; set; }
        public virtual DbSet<Borrowers> Borrowers { get; set; }
        public virtual DbSet<Loans> Loans { get; set; }
        public virtual DbSet<Publishers> Publishers { get; set; }
        public virtual DbSet<Reservation> Reservation { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual int AddBookCopies(Nullable<int> bookID, Nullable<int> copyCount, string bookshelf, Nullable<int> shelf, string copyStatus)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var copyCountParameter = copyCount.HasValue ?
                new ObjectParameter("CopyCount", copyCount) :
                new ObjectParameter("CopyCount", typeof(int));
    
            var bookshelfParameter = bookshelf != null ?
                new ObjectParameter("Bookshelf", bookshelf) :
                new ObjectParameter("Bookshelf", typeof(string));
    
            var shelfParameter = shelf.HasValue ?
                new ObjectParameter("Shelf", shelf) :
                new ObjectParameter("Shelf", typeof(int));
    
            var copyStatusParameter = copyStatus != null ?
                new ObjectParameter("CopyStatus", copyStatus) :
                new ObjectParameter("CopyStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBookCopies", bookIDParameter, copyCountParameter, bookshelfParameter, shelfParameter, copyStatusParameter);
        }
    
        public virtual int AddBookswithCopies(string title, Nullable<int> authorID, Nullable<int> publisherID, string iSBN, string genre, Nullable<int> year, Nullable<int> pages, Nullable<int> copiesAvailable, string bookShelf, Nullable<int> shelf, Nullable<int> shelfPosition)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            var publisherIDParameter = publisherID.HasValue ?
                new ObjectParameter("PublisherID", publisherID) :
                new ObjectParameter("PublisherID", typeof(int));
    
            var iSBNParameter = iSBN != null ?
                new ObjectParameter("ISBN", iSBN) :
                new ObjectParameter("ISBN", typeof(string));
    
            var genreParameter = genre != null ?
                new ObjectParameter("Genre", genre) :
                new ObjectParameter("Genre", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var pagesParameter = pages.HasValue ?
                new ObjectParameter("Pages", pages) :
                new ObjectParameter("Pages", typeof(int));
    
            var copiesAvailableParameter = copiesAvailable.HasValue ?
                new ObjectParameter("CopiesAvailable", copiesAvailable) :
                new ObjectParameter("CopiesAvailable", typeof(int));
    
            var bookShelfParameter = bookShelf != null ?
                new ObjectParameter("BookShelf", bookShelf) :
                new ObjectParameter("BookShelf", typeof(string));
    
            var shelfParameter = shelf.HasValue ?
                new ObjectParameter("Shelf", shelf) :
                new ObjectParameter("Shelf", typeof(int));
    
            var shelfPositionParameter = shelfPosition.HasValue ?
                new ObjectParameter("ShelfPosition", shelfPosition) :
                new ObjectParameter("ShelfPosition", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBookswithCopies", titleParameter, authorIDParameter, publisherIDParameter, iSBNParameter, genreParameter, yearParameter, pagesParameter, copiesAvailableParameter, bookShelfParameter, shelfParameter, shelfPositionParameter);
        }
    
        public virtual int AddBorrower(string firstName, string lastName, string phone, string email, Nullable<int> currentLoanCount)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var currentLoanCountParameter = currentLoanCount.HasValue ?
                new ObjectParameter("CurrentLoanCount", currentLoanCount) :
                new ObjectParameter("CurrentLoanCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBorrower", firstNameParameter, lastNameParameter, phoneParameter, emailParameter, currentLoanCountParameter);
        }
    
        public virtual int BorrowBook(Nullable<int> bookID, Nullable<int> borrowerID, Nullable<System.DateTime> borrowDate, Nullable<System.DateTime> returnDate)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var borrowerIDParameter = borrowerID.HasValue ?
                new ObjectParameter("BorrowerID", borrowerID) :
                new ObjectParameter("BorrowerID", typeof(int));
    
            var borrowDateParameter = borrowDate.HasValue ?
                new ObjectParameter("BorrowDate", borrowDate) :
                new ObjectParameter("BorrowDate", typeof(System.DateTime));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BorrowBook", bookIDParameter, borrowerIDParameter, borrowDateParameter, returnDateParameter);
        }
    
        public virtual int ReturnBook(Nullable<int> copyID, Nullable<int> borrowerID)
        {
            var copyIDParameter = copyID.HasValue ?
                new ObjectParameter("CopyID", copyID) :
                new ObjectParameter("CopyID", typeof(int));
    
            var borrowerIDParameter = borrowerID.HasValue ?
                new ObjectParameter("BorrowerID", borrowerID) :
                new ObjectParameter("BorrowerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnBook", copyIDParameter, borrowerIDParameter);
        }
    
        public virtual int AddBook(string title, Nullable<int> authorID, Nullable<int> publisherID, string iSBN, string genre, Nullable<int> year, Nullable<int> pages, Nullable<int> copiesAvailable, string bookShelf, Nullable<int> shelf, Nullable<int> shelfPosition)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            var publisherIDParameter = publisherID.HasValue ?
                new ObjectParameter("PublisherID", publisherID) :
                new ObjectParameter("PublisherID", typeof(int));
    
            var iSBNParameter = iSBN != null ?
                new ObjectParameter("ISBN", iSBN) :
                new ObjectParameter("ISBN", typeof(string));
    
            var genreParameter = genre != null ?
                new ObjectParameter("Genre", genre) :
                new ObjectParameter("Genre", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var pagesParameter = pages.HasValue ?
                new ObjectParameter("Pages", pages) :
                new ObjectParameter("Pages", typeof(int));
    
            var copiesAvailableParameter = copiesAvailable.HasValue ?
                new ObjectParameter("CopiesAvailable", copiesAvailable) :
                new ObjectParameter("CopiesAvailable", typeof(int));
    
            var bookShelfParameter = bookShelf != null ?
                new ObjectParameter("BookShelf", bookShelf) :
                new ObjectParameter("BookShelf", typeof(string));
    
            var shelfParameter = shelf.HasValue ?
                new ObjectParameter("Shelf", shelf) :
                new ObjectParameter("Shelf", typeof(int));
    
            var shelfPositionParameter = shelfPosition.HasValue ?
                new ObjectParameter("ShelfPosition", shelfPosition) :
                new ObjectParameter("ShelfPosition", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBook", titleParameter, authorIDParameter, publisherIDParameter, iSBNParameter, genreParameter, yearParameter, pagesParameter, copiesAvailableParameter, bookShelfParameter, shelfParameter, shelfPositionParameter);
        }
    }
}
